/* autogenerated by Processing revision 1293 on 2024-10-21 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class HW1 extends PApplet {

ShapeButton lineButton;
ShapeButton circleButton;
ShapeButton polygonButton;
ShapeButton ellipseButton;
ShapeButton curveButton;
ShapeButton pencilButton;
ShapeButton eraserButton;
ShapeButton spraysButton;

int selectedColor;
// Color Buttons
ShapeButton redButton;
ShapeButton orangeButton;
ShapeButton yellowButton;
ShapeButton greenButton;
ShapeButton blueButton;
ShapeButton purpleButton;

ShapeButton blackButton;
ShapeButton whiteButton;
ShapeButton grayButton;

ShapeButton pinkButton;
ShapeButton brownButton;
ShapeButton anycolorButton;


Button clearButton;

ShapeRenderer shapeRenderer;
ArrayList<ShapeButton> shapeButton;
float eraserSize = 20;

public void setup() {
    /* size commented out by preprocessor */;
    background(255);
    shapeRenderer = new ShapeRenderer();
    initButton();

}

public void draw() {

    background(255);
    for (ShapeButton sb : shapeButton) {
        sb.run(() -> {
            sb.beSelect();
            shapeRenderer.setRenderer(sb.getRendererType());
        });
    }

    clearButton.run(() -> {
        shapeRenderer.clear();
    });
    shapeRenderer.box.show();

    shapeRenderer.run();

}

public void resetButton() {
    for (ShapeButton sb : shapeButton) {
        sb.setSelected(false);
    }
}

public void initButton() {
    shapeButton = new ArrayList<ShapeButton>();
    lineButton = new ShapeButton(10, 10, 30, 30) {
        @Override
        public void show() {
            super.show();
            stroke(0);
            line(pos.x + 2, pos.y + 2, pos.x + size.x - 2, pos.y + size.y - 2);
        }

        @Override
        public Renderer getRendererType() {
            LineRenderer lr = new LineRenderer();
            lr.setColor(selectedColor);
            return lr;
        }
    };

    lineButton.setBoxAndClickColor(color(250), color(150));
    shapeButton.add(lineButton);

    circleButton = new ShapeButton(45, 10, 30, 30) {
        @Override
        public void show() {
            super.show();
            stroke(0);
            circle(pos.x + size.x / 2, pos.y + size.y / 2, size.x - 2);
        }

        @Override
        public Renderer getRendererType() {
            CircleRenderer cr = new CircleRenderer();
            cr.setColor(selectedColor);
            return cr;
        }
    };
    circleButton.setBoxAndClickColor(color(250), color(150));
    shapeButton.add(circleButton);

    polygonButton = new ShapeButton(80, 10, 30, 30) {
        @Override
        public void show() {
            super.show();
            stroke(0);
            line(pos.x + 2, pos.y + 2, pos.x + size.x - 2, pos.y + 2);
            line(pos.x + 2, pos.y + size.y - 2, pos.x + size.x - 2, pos.y + size.y - 2);
            line(pos.x + size.x - 2, pos.y + 2, pos.x + size.x - 2, pos.y + size.y - 2);
            line(pos.x + 2, pos.y + 2, pos.x + 2, pos.y + size.y - 2);
        }

        @Override
        public Renderer getRendererType() {
            PolygonRenderer pr = new PolygonRenderer();
            pr.setColor(selectedColor);
            return pr;
        }

    };

    polygonButton.setBoxAndClickColor(color(250), color(150));
    shapeButton.add(polygonButton);

    ellipseButton = new ShapeButton(115, 10, 30, 30) {
        @Override
        public void show() {
            super.show();
            stroke(0);
            ellipse(pos.x + size.x / 2, pos.y + size.y / 2, size.x - 2, size.y * 2 / 3);
        }

        @Override
        public Renderer getRendererType() {
            EllipseRenderer er = new EllipseRenderer();
            er.setColor(selectedColor);
            return er;
            // return new EllipseRenderer();
        }

    };

    ellipseButton.setBoxAndClickColor(color(250), color(150));
    shapeButton.add(ellipseButton);

    curveButton = new ShapeButton(150, 10, 30, 30) {
        @Override
        public void show() {
            super.show();
            stroke(0);
            bezier(pos.x, pos.y, pos.x, pos.y + size.y, pos.x + size.x, pos.y, pos.x + size.x, pos.y + size.y);
        }

        @Override
        public Renderer getRendererType() {
            CurveRenderer cr = new CurveRenderer();
            cr.setColor(selectedColor);
            return cr;
            // return new CurveRenderer();
        }

    };

    curveButton.setBoxAndClickColor(color(250), color(150));
    shapeButton.add(curveButton);

    clearButton = new Button(width - 50, 10, 30, 30);
    clearButton.setBoxAndClickColor(color(250), color(150));
    clearButton.setImage(loadImage("clear.png"));

    pencilButton = new ShapeButton(185, 10, 30, 30) {
        @Override
        public Renderer getRendererType() {
            PencilRenderer pr = new PencilRenderer();
            pr.setColor(selectedColor);
            return pr;
            // return new PencilRenderer();
        }
    };
    pencilButton.setImage(loadImage("pencil.png"));

    pencilButton.setBoxAndClickColor(color(250), color(150));
    shapeButton.add(pencilButton);

    eraserButton = new ShapeButton(220, 10, 30, 30) {
        @Override
        public Renderer getRendererType() {
            return new EraserRenderer();
        }
    };
    eraserButton.setImage(loadImage("eraser.png"));

    eraserButton.setBoxAndClickColor(color(250), color(150));
    shapeButton.add(eraserButton);

    spraysButton = new ShapeButton(255, 10, 30, 30) {
        @Override
        public Renderer getRendererType() {
            return new SpraysRenderer();
        }
    };
    spraysButton.setImage(loadImage("palette.png"));

    spraysButton.setBoxAndClickColor(color(250), color(150));
    shapeButton.add(spraysButton);

    redButton = new ShapeButton(300,10,15,15){
        @Override
        public Renderer getRendererType(){
            selectedColor = color(255,0,0);
            return new colorRenderer();
        }
    };
    redButton.setBoxAndClickColor(color(255,0,0),color(255,50,50));
    shapeButton.add(redButton);

    orangeButton = new ShapeButton(320,10,15,15){
        @Override
        public Renderer getRendererType(){
            selectedColor = color(255,165,0);
            return new colorRenderer();
        }
    };
    orangeButton.setBoxAndClickColor(color(255,165,0),color(255,215,0));
    shapeButton.add(orangeButton);

    yellowButton = new ShapeButton(340,10,15,15){
        @Override
        public Renderer getRendererType(){
            selectedColor = color(255,255,0);
            return new colorRenderer();
        }
    };
    yellowButton.setBoxAndClickColor(color(255,255,0),color(255,255,50));
    shapeButton.add(yellowButton);

    greenButton = new ShapeButton(360,10,15,15){
        @Override
        public Renderer getRendererType(){
            selectedColor = color(0,128,0);
            return new colorRenderer();
        }
    };
    greenButton.setBoxAndClickColor(color(0,128,0),color(50,205,50));
    shapeButton.add(greenButton);

    blueButton = new ShapeButton(380,10,15,15){
        @Override
        public Renderer getRendererType(){
            selectedColor = color(0,0,255);
            return new colorRenderer();
        }
    };
    blueButton.setBoxAndClickColor(color(0,0,255),color(50,50,255));
    shapeButton.add(blueButton);

    purpleButton = new ShapeButton(400,10,15,15){
        @Override
        public Renderer getRendererType(){
            selectedColor = color(128,0,128);
            return new colorRenderer();
        }
    };
    purpleButton.setBoxAndClickColor(color(128,0,128),color(128,50,128));
    shapeButton.add(purpleButton);

    blackButton = new ShapeButton(300,30,15,15){
        @Override
        public Renderer getRendererType(){
            selectedColor = color(0);
            return new colorRenderer();
        }
    };
    blackButton.setBoxAndClickColor(color(0),color(50));
    shapeButton.add(blackButton);

    whiteButton = new ShapeButton(320,30,15,15){
        @Override
        public Renderer getRendererType(){
            selectedColor = color(255);
            return new colorRenderer();
        }
    };
    whiteButton.setBoxAndClickColor(color(255),color(205,205,205));
    shapeButton.add(whiteButton);

    grayButton = new ShapeButton(340,30,15,15){
        @Override
        public Renderer getRendererType(){
            selectedColor = color(128);
            return new colorRenderer();
        }
    };
    grayButton.setBoxAndClickColor(color(128),color(178));
    shapeButton.add(grayButton);

    pinkButton = new ShapeButton(360,30,15,15){
        @Override
        public Renderer getRendererType(){
            selectedColor = color(255,192,203);
            return new colorRenderer();
        }
    };
    pinkButton.setBoxAndClickColor(color(255,192,203),color(255,182,193));
    shapeButton.add(pinkButton);

    brownButton = new ShapeButton(380,30,15,15){
        @Override
        public Renderer getRendererType(){
            selectedColor = color(165,42,42);
            return new colorRenderer();
        }
    };
    brownButton.setBoxAndClickColor(color(165,42,42),color(139,69,19));
    shapeButton.add(brownButton);

    // anycolorButton = new ShapeButton(400,30,15,15){
    //     @Override
    //     public Renderer getRendererType(){
    //         selectedColor = color(165,42,42);
    //         return new colorRenderer();
    //     }
    // };
    // anycolorButton.setBoxAndClickColor(color(165,42,42),color(139,69,19));
    // shapeButton.add(anycolorButton);


}

public void keyPressed() {
    if (key == 'z' || key == 'Z') {
        shapeRenderer.popShape();
    }

}

public void mouseWheel(MouseEvent event) {
    float e = event.getCount();
    if (e < 0)
        eraserSize += 1;
    else if (e > 0)
        eraserSize -= 1;
    eraserSize = max(min(eraserSize, 30), 4);
}
public class Box {
    public Vector3 pos;
    public Vector3 size;
    protected int box_color = color(0);

    public Box(float x, float y, float w, float h) {
        pos = new Vector3(x, y, 0);
        size = new Vector3(w, h, 0);
    }

    public Box(Vector3 p, Vector3 s) {
        pos = p;
        size = s;
    }

    public Box setBoxColor(int c) {
        box_color = c;
        return this;
    }

    public void show() {
        fill(box_color);
        noStroke();
        rect(pos.x, pos.y, size.x, size.y);
    }

    public boolean checkInSide(Vector3 p) {
        if (p.x >= pos.x && p.x <= pos.x + size.x && p.y >= pos.y && p.y <= pos.y + size.y)
            return true;
        return false;
    }

    public boolean checkInSide() {
        if (mouseX >= pos.x && mouseX <= pos.x + size.x && mouseY >= pos.y && mouseY <= pos.y + size.y)
            return true;
        return false;
    }

}

public class Button extends Box {
    protected int click_color;
    protected boolean press = false;
    protected boolean once = false;
    protected PImage image = null;

    public Button(float x, float y, float w, float h) {
        super(x, y, w, h);
    }

    public Button(Vector3 p, Vector3 s) {
        super(p, s);
    }

    public Button setImage(PImage img) {
        image = img;
        return this;
    }

    public void run(ButtonFunction bf) {
        click(bf);
        show();
    }

    @Override
    public void show() {
        if (!press)
            fill(box_color);
        else
            fill(click_color);
        noStroke();
        rect(pos.x, pos.y, size.x, size.y);
        if (image != null)
            image(image, pos.x, pos.y, size.x, size.y);
    }

    public void setClickColor(int c) {
        click_color = c;
    }

    public Button setBoxAndClickColor(int c1, int c2) {
        setBoxColor(c1);
        setClickColor(c2);
        return this;
    }

    public void click(ButtonFunction bf) {

        if (!checkInSide())
            return;
        if (mousePressed) {
            press = true;
            if (!once) {
                bf.function();
                once = true;
            }
        } else {
            press = false;
            once = false;
        }
    }

}

public class ShapeButton extends Button {
    private boolean selected = false;

    public ShapeButton(float x, float y, float w, float h) {
        super(x, y, w, h);
    }

    public ShapeButton(Vector3 p, Vector3 s) {
        super(p, s);
    }

    @Override
    public void show() {
        super.show();
        if (selected) {
            stroke(255, 0, 0);
            noFill();
            rect(pos.x - 2, pos.y - 2, size.x + 4, size.y + 4);
        }
    }

    public void beSelect() {
        resetButton();
        setSelected(true);
    }

    public void setSelected(boolean b) {
        selected = b;
    }

    public Renderer getRendererType() {
        return null;
    }
}
@FunctionalInterface
interface ButtonFunction {
    void function();
}

public interface Shape {
    public void drawShape();
}

public class Point implements Shape {
    ArrayList<Vector3> points = new ArrayList<Vector3>();
    int currentColor;

    public Point(ArrayList<Vector3> p, int c) {
        points = p;
        currentColor = c;
    }

    @Override
    public void drawShape() {
        if (points.size() <= 1)
            return;
        for (int i = 0; i < points.size() - 1; i++) {
            Vector3 p1 = points.get(i);
            Vector3 p2 = points.get(i + 1);
            CGLine(p1.x, p1.y, p2.x, p2.y, currentColor);
        }
    }
}

public class Line implements Shape {
    Vector3 point1;
    Vector3 point2;
    int currentColor;

    public Line() {
    };

    public Line(Vector3 v1, Vector3 v2, int c) {
        point1 = v1;
        point2 = v2;
        currentColor = c;
    }

    @Override
    public void drawShape() {
        CGLine(point1.x, point1.y, point2.x, point2.y, currentColor);
    }

}

public class Circle implements Shape {
    Vector3 center;
    float radius;
    int currentColor;

    public Circle() {
    }

    public Circle(Vector3 v1, float r, int c) {
        center = v1;
        radius = r;
        currentColor = c;
    }

    @Override
    public void drawShape() {
        CGCircle(center.x, center.y, radius, currentColor);
    }
}

public class Polygon implements Shape {
    ArrayList<Vector3> verties = new ArrayList<Vector3>();
    int currentColor;

    public Polygon(ArrayList<Vector3> v, int c) {
        verties = v;
        currentColor = c;
    }

    @Override
    public void drawShape() {
        if (verties.size() <= 0)
            return;
        for (int i = 0; i <= verties.size(); i++) {
            Vector3 p1 = verties.get(i % verties.size());
            Vector3 p2 = verties.get((i + 1) % verties.size());
            CGLine(p1.x, p1.y, p2.x, p2.y, currentColor);
        }
    }
}

public class Ellipse implements Shape {
    Vector3 center;
    float radius1, radius2;
    int currentColor;

    public Ellipse() {
    }

    public Ellipse(Vector3 cen, float r1, float r2, int c) {
        center = cen;
        radius1 = r1;
        radius2 = r2;
        currentColor = c;
    }

    @Override
    public void drawShape() {
        CGEllipse(center.x, center.y, radius1, radius2, currentColor);
    }
}

public class Curve implements Shape {
    Vector3 cpoint1, cpoint2, cpoint3, cpoint4;
    float radius1, radius2;
    int currentColor;

    public Curve() {
    }

    public Curve(Vector3 p1, Vector3 p2, Vector3 p3, Vector3 p4, int c) {
        cpoint1 = p1;
        cpoint2 = p2;
        cpoint3 = p3;
        cpoint4 = p4;
        currentColor = c;
    }

    @Override
    public void drawShape() {
        CGCurve(cpoint1, cpoint2, cpoint3, cpoint4, currentColor);
    }
}

public class EraseArea implements Shape {
    Vector3 point1, point2;

    public EraseArea() {
    }

    public EraseArea(Vector3 p1, Vector3 p2) {
        point1 = p1;
        point2 = p2;
    }

    @Override
    public void drawShape() {
        CGEraser(point1, point2);
    }
}
public class ShapeRenderer{
    private Box box;
    public Renderer renderer;
    private ArrayList<Shape> shapes;
    public ShapeRenderer(){
      box = new Box(20,50,width-40,height-100);
      box.setBoxColor(250);
      shapes = new ArrayList<Shape>();
    }
    
    public void run(){      
      
      shapes.forEach(Shape::drawShape);
      if(renderer!=null) renderer.render();
    }
    
    public void setRenderer(Renderer r){
        renderer = r;
    }
    
    public void addShape(Shape s){
      shapes.add(s);
    }   
    
    public boolean checkInBox(Vector3 v){
      return box.checkInSide(v);
    }
    
    public void popShape(){
        if(shapes.size()<=0) return;
        shapes.remove(shapes.size()-1);
    }
    public void clear(){
        shapes.clear();
    }
}


public interface Renderer{
    void render();
    void setColor(int c);
}

public class PencilRenderer implements Renderer{
    
    private ArrayList<Vector3> points = new ArrayList<Vector3>();
    private boolean once;
    private int currentColor;
    
    @Override
    public void setColor(int c){
        currentColor = c;
    }
    
    @Override 
    public void render(){
        if(!shapeRenderer.checkInBox(new Vector3(mouseX,mouseY,0))) return;
        if(mousePressed){
            once = false;
            points.add(new Vector3(mouseX,mouseY,0));
        }else{
            if(!once){
                once = true;
                shapeRenderer.addShape(new Point(points, currentColor)); 
                points = new ArrayList<Vector3>();
            }
        }
        if(points.size()<=1) return;  
        for(int i=0;i<points.size()-1;i++){
            Vector3 p1 = points.get(i);
            Vector3 p2 = points.get(i+1);
            CGLine(p1.x,p1.y,p2.x,p2.y, currentColor);
        }
        
    }

}

public class LineRenderer implements Renderer{
    private boolean once;
    private boolean first_click;
    private Vector3 first_point;
    private Vector3 second_point;
    private int currentColor;
    
    @Override
    public void setColor(int c){
        currentColor = c;
    }
    
    @Override
    public void render(){
        if(!shapeRenderer.checkInBox(new Vector3(mouseX,mouseY,0))) return;
        if(mousePressed&& mouseButton == LEFT){
            if(!once){
                if(!first_click) first_point = new Vector3(mouseX,mouseY,0);
                if(first_click) second_point = new Vector3(mouseX,mouseY,0);             
                if(first_click){
                    shapeRenderer.addShape(new Line(first_point,second_point, currentColor));
                    first_point = null;
                    second_point = null;
                }
                first_click = !first_click;
                once = true;
            }
        }else if(mousePressed&& mouseButton == RIGHT){
            first_click = false;          
            first_point = null;
            second_point = null;
        }
        else{
            once = false;
        }     
        if(first_click && first_point!=null) CGLine(first_point.x,first_point.y,mouseX,mouseY, currentColor);      
    }
}

public class CircleRenderer implements Renderer{
  
    private boolean once;
    private boolean first_click;
    private Vector3 first_point;
    private Vector3 second_point;
    private int currentColor;
    
    @Override
    public void setColor(int c){
        currentColor = c;
    }
    
    @Override
    public void render(){
        if(!shapeRenderer.checkInBox(new Vector3(mouseX,mouseY,0))) return;
        if(mousePressed&& mouseButton == LEFT){
              if(!once){
                  if(!first_click) first_point = new Vector3(mouseX,mouseY,0);
                  if(first_click) second_point = new Vector3(mouseX,mouseY,0);             
                  if(first_click){
                      shapeRenderer.addShape(new Circle(first_point,distance(first_point,second_point), currentColor));
                      first_point = null;
                      second_point = null;
                  }
                  first_click = !first_click;
                  once = true;
              }
          }else if(mousePressed&& mouseButton == RIGHT){
              first_click = false;          
              first_point = null;
              second_point = null;
          }
          else{
              once = false;
          }           
          if(first_click && first_point!=null) CGCircle(first_point.x,first_point.y,distance(first_point,new Vector3(mouseX,mouseY,0)), currentColor);
    }
}

public class PolygonRenderer implements Renderer{
  
    private boolean once;
    private ArrayList<Vector3> verties = new ArrayList<Vector3>();
    private int currentColor;
    
    @Override
    public void setColor(int c){
        currentColor = c;
    }
  
    @Override
    public void render(){
        if(!shapeRenderer.checkInBox(new Vector3(mouseX,mouseY,0))) return;
        if(mousePressed&& mouseButton == LEFT){
            if(!once){
                verties.add(new Vector3(mouseX,mouseY,0));
                once = true;
            }
        }else if(mousePressed&& mouseButton == RIGHT){
            if(!once){
              shapeRenderer.addShape(new Polygon(verties, currentColor));
              verties = new ArrayList<Vector3>();
              once = true;
            }
        }
        else{
            once = false;
        }
        if(verties.size()>0){
            for(int i=0;i<verties.size()-1;i++){
                Vector3 p1 = verties.get(i);
                Vector3 p2 = verties.get(i+1);
                CGLine(p1.x,p1.y,p2.x,p2.y, currentColor);
            }
            Vector3 p = verties.get(verties.size()-1);
            CGLine(p.x,p.y,mouseX,mouseY, currentColor);
        }     
    }
} 

public class EllipseRenderer implements Renderer{
  private boolean once;
  private int times;
  private Vector3 center;
  private float radius1 = 0;
  private float radius2 = 0;
  private int currentColor;
    
    @Override
    public void setColor(int c){
        currentColor = c;
    }
  
  @Override
  public void render(){
      if(!shapeRenderer.checkInBox(new Vector3(mouseX,mouseY,0))) return;
        if(mousePressed&& mouseButton == LEFT){
            if(!once){
                if(times==0) center = new Vector3(mouseX,mouseY,0);
                if(times==1){
                    float dist = abs(center.x - mouseX);
                    radius1 = dist;
                    radius2 = dist;
                }
                if(times==2){
                    float dist = abs(center.y - mouseY);                  
                    radius2 = dist;
                    shapeRenderer.addShape(new Ellipse(center,radius1,radius2, currentColor));
                }
                times += 1;
                times %=3;
                once = true;
            }
        }else if(mousePressed&& mouseButton == RIGHT){
            times = 0;
            center = null;
        }
        else{
            once = false;
        }
        if(times==0) return;
        if(times==1) {
          float dist = abs(center.x - mouseX);
          CGEllipse(center.x,center.y,dist,dist, currentColor);
        }
        if(times==2){
          float dist = abs(center.y - mouseY);
          CGEllipse(center.x,center.y,radius1,dist, currentColor);
        }

  }

}

class EraserRenderer implements Renderer{
    private int currentColor;
    
    @Override
    public void setColor(int c){
        currentColor = c;
    }

  @Override
  public void render(){
      if(!shapeRenderer.checkInBox(new Vector3(mouseX,mouseY,0))) return;
     // loadPixels();
      noFill();
      stroke(0);
      rect(mouseX - eraserSize/2,mouseY - eraserSize/2,eraserSize,eraserSize);
      if(mousePressed&& mouseButton == LEFT){
          shapeRenderer.addShape(new EraseArea(new Vector3(mouseX - eraserSize/2,mouseY - eraserSize/2,0),new Vector3(mouseX + eraserSize/2,mouseY + eraserSize/2,0)));
          
      }
      //updatePixels();
     
  }

}

class CurveRenderer implements Renderer{
  private boolean once;
  private int times;
  private Vector3 cp1;
  private Vector3 cp2;
  private Vector3 cp3;
  private Vector3 cp4;
  private int currentColor;
    
    @Override
    public void setColor(int c){
        currentColor = c;
    }
  
  @Override
  public void render(){
      if(!shapeRenderer.checkInBox(new Vector3(mouseX,mouseY,0))) return;
      if(mousePressed&& mouseButton == LEFT){
          if(!once){   
              switch(times){
                case 0:
                  cp1 = new Vector3(mouseX,mouseY,0);
                  break;
                case 1:
                  cp2 = new Vector3(mouseX,mouseY,0);
                  break;
                case 2:
                  cp3 = new Vector3(mouseX,mouseY,0);
                  break;
                case 3:
                  cp4 = new Vector3(mouseX,mouseY,0);
                  shapeRenderer.addShape(new Curve(cp1,cp3,cp4,cp2, currentColor));
                 
                  break;
              }
              times += 1;
              times %=4;
              once = true;
          }
      }else if(mousePressed&& mouseButton == RIGHT){
          times = 0;          
      }
      else{
          once = false;
      }
      Vector3 cp = new Vector3(mouseX,mouseY,0);
      if(times==0) return;
      if(times==1) CGCurve(cp1,cp1,cp ,cp, currentColor);
      if(times==2) CGCurve(cp1,cp,cp2 ,cp2, currentColor);
      if(times==3) CGCurve(cp1,cp3,cp ,cp2, currentColor);
      
  }
}

public class SpraysRenderer implements Renderer{
    
    private ArrayList<Vector3> points = new ArrayList<Vector3>();
    private boolean once;
    private float sprayRadius = 20; // Default radius
    private int sprayDensity = 50; // Default density
    private int currentColor;
    
    @Override
    public void setColor(int c){
        currentColor = c;
    }
    @Override 
    public void render(){
        if(!shapeRenderer.checkInBox(new Vector3(mouseX,mouseY,0))) return;
        if(mousePressed){
            once = false;
            points.add(new Vector3(mouseX,mouseY,0));
            // CGSprays(mouseX,mouseY,sprayRadius,sprayDensity);
        }else{
            if(!once){
                once = true;
                shapeRenderer.addShape(new Point(points, currentColor)); 
                points = new ArrayList<Vector3>();
            }
        }
        if (points.size() <= 1) return;  
        for (int i = 0; i < points.size() - 1; i++) {
            Vector3 p1 = points.get(i);
            Vector3 p2 = points.get(i + 1);
            CGSprays(p1.x, p1.y, sprayRadius, sprayDensity);
            CGSprays(p2.x, p2.y, sprayRadius, sprayDensity);
        }
       
    }

}

class colorRenderer implements Renderer{
    private int currentColor;
    
    @Override
    public void setColor(int c){
        currentColor = c;
    }
    @Override
    public void render(){}
}
static final public class Vector3 {
    private float x;
    private float y;
    private float z;

    Vector3() {
        x = 0;
        y = 0;
        z = 0;
    }

    Vector3(float _a) {
        x = _a;
        y = _a;
        z = _a;
    }

    Vector3(float _x, float _y, float _z) {
        x = _x;
        y = _y;
        z = _z;
    }

    public float x() {
        return x;
    }

    public float y() {
        return y;
    }

    public float z() {
        return z;
    }

    public float xyz(int i) {
        if (i == 0)
            return x;
        else if (i == 1)
            return y;
        else
            return z;
    }

    public static Vector3 Zero() {
        return new Vector3(0);
    }

    public static Vector3 Ones() {
        return new Vector3(1);
    }

    public static Vector3 UnitX() {
        return new Vector3(1, 0, 0);
    }

    public static Vector3 UnitY() {
        return new Vector3(0, 1, 0);
    }

    public static Vector3 UnitZ() {
        return new Vector3(0, 0, 1);
    }

    public void set(float _x, float _y, float _z) {
        x = _x;
        y = _y;
        z = _z;
    }

    public void setZero() {
        x = 0.0f;
        y = 0.0f;
        z = 0.0f;
    }

    public void setOnes() {
        x = 1.0f;
        y = 1.0f;
        z = 1.0f;
    }

    public void setUnitX() {
        x = 1.0f;
        y = 0.0f;
        z = 0.0f;
    }

    public void setUnitY() {
        x = 0.0f;
        y = 1.0f;
        z = 0.0f;
    }

    public void setUnitZ() {
        x = 0.0f;
        y = 0.0f;
        z = 1.0f;
    }

    public static Vector3 add(Vector3 a, Vector3 b) {
        Vector3 result = new Vector3();
        result.x = a.x + b.x;
        result.y = a.y + b.y;
        result.z = a.z + b.z;
        return result;
    }

    public static Vector3 sub(Vector3 a, Vector3 b) {
        Vector3 result = new Vector3();
        result.x = a.x - b.x;
        result.y = a.y - b.y;
        result.z = a.z - b.z;
        return result;
    }

    public static Vector3 mult(float n, Vector3 a) {
        Vector3 result = new Vector3();
        result.x = n * a.x;
        result.y = n * a.y;
        result.z = n * a.z;
        return result;
    }

    public Vector3 mult(float n) {
        Vector3 result = new Vector3();
        result.x = n * x;
        result.y = n * y;
        result.z = n * z;
        return result;
    }

    public void product(float n) {

        x *= n;
        y *= n;
        z *= n;
    }

    public Vector3 dive(float n) {
        Vector3 result = new Vector3();
        result.x = x / n;
        result.y = y / n;
        result.z = z / n;
        return result;
    }

    public float minComponent() {
        return min(x, min(y, z));
    }

    public float maxComponent() {
        return max(x, max(y, z));
    }

    public static Vector3 cross(Vector3 a, Vector3 b) {
        Vector3 result = new Vector3();
        result.x = a.y * b.z - a.z * b.y;
        result.y = a.z * b.x - a.x * b.z;
        result.z = a.x * b.y - a.y * b.x;
        return result;
    }

    public static float dot(Vector3 a, Vector3 b) {
        return a.x * b.x + a.y * b.y + a.z * b.z;
    }

    public float norm() {
        return sqrt(x * x + y * y + z * z);
    }

    public void print() {
        println("x: " + x + " y: " + y + " z: " + z);
    }

    public Vector3 unit_vector() {
        return Vector3.mult(1 / this.norm(), this);
    }

    public void normalize() {
        float a = 1 / this.norm();
        this.product(a);
    }

    public static Vector3 unit_vector(Vector3 v) {
        return Vector3.mult(1 / v.norm(), v);
    }

    public Vector3 sub(Vector3 b) {
        Vector3 result = new Vector3();
        result.x = x - b.x;
        result.y = y - b.y;
        result.z = z - b.z;
        return result;
    }

    public Vector3 add(Vector3 b) {
        Vector3 result = new Vector3();
        result.x = x + b.x;
        result.y = y + b.y;
        result.z = z + b.z;
        return result;
    }

    public void minus(Vector3 b) {

        x -= b.x;
        y -= b.y;
        z -= b.z;
    }

    public void plus(Vector3 b) {

        x += b.x;
        y += b.y;
        z += b.z;
    }

    public float length_squared() {
        return x * x + y * y + z * z;
    }

    public float length() {
        return sqrt(this.length_squared());
    }

    public boolean near_zero() {
        float s = 1e-8f;
        return (abs(x) < s) && abs(y) < s && abs(z) < s;
    }

    public Vector3 product(Vector3 v) {
        Vector3 result = new Vector3();
        result.x = x * v.x;
        result.y = y * v.y;
        result.z = z * v.z;
        return result;
    }

    public Vector3 inv() {
        return new Vector3(1 / x, 1 / y, 1 / z);
    }

    public float magSq() {
        return x * x + y * y + z * z;
    }

    public void clipMag(float m) {
        float r = magSq() / (m * m);
        if (r > 1) {
            float sr = sqrt(r);
            x /= sr;
            y /= sr;
            z /= sr;
        }
    }

    public Vector3 copy() {
        return new Vector3(x, y, z);
    }

    public void copy(Vector3 b) {
        x = b.x;
        y = b.y;
        z = b.z;
    }

    @Override
    public String toString() {
        return "x : " + x + " y : " + y + " z : " + z;
    }
}
public void CGLine(float x1, float y1, float x2, float y2, int c) {
    
    // stroke(0);
    // noFill();
    // line(x1,y1,x2,y2);
    int dx = (int)abs(x2 - x1);
    int dy = (int)abs(y2 - y1);
    int dir_x = x1 < x2 ? 1 : -1; // Increment direction: 1 is right or -1 is left
    int dir_y = y1 < y2 ? 1 : -1;
    int err = dx - dy;

    while (true) {
        drawPoint(x1, y1, c);
        if (x1 == x2 && y1 == y2) {
            break;
        }

        float e2 = 2 * err;
        if (e2 > -dy) {
            err -= dy;
            x1 += dir_x;
        }
        if (e2 < dx) {
            err += dx;
            y1 += dir_y;
        }
    }
        
}

public void CGCircle(float x, float y, float r, int c) {

    // stroke(0);
    // noFill();
    // circle(x,y,r*2);
    int xc = (int)x;
    int yc = (int)y;
    int xk=0;

    int yk = PApplet.parseInt(r);

    float d = 5/4 - r;

    drawCirclePoints(xc, yc, xk, yk, c);

    while (xk < yk) {
        
        if (d < 0) {
            d += 2 * xk + 3;
        } else {
            d += 2 * (xk - yk) + 5;
            yk--;
        }
        xk++;
        drawCirclePoints(xc, yc, xk, yk, c);
    }
    
}

public void CGEllipse(float x, float y, float r1, float r2, int c) {
    
    // stroke(0);
    // noFill();
    // ellipse(x,y,r1*2,r2*2);
    float xc = x;
    float yc = y;
    float xk = 0;
    float yk = r2;
    float d1 = r2 * r2 - r1 * r1 * r2 + 0.25f * r1 * r1;
    float dx = 2 * r2 * r2 * xk;
    float dy = 2 * r1 * r1 * yk;

    // Region 1
    while(dx < dy) {
        drawEllipsePoints(xc, yc, xk, yk, c);
        if(d1 < 0) {
            xk++;
            dx += 2 * r2 * r2;
            d1 += dx + r2 * r2;
        } else {
            xk++;
            yk--;
            dx += 2 * r2 * r2;
            dy -= 2 * r1 * r1;
            d1 += dx - dy + r2 * r2;
        }
    }
    float d2 = r2 * r2 * (xk + 0.5f) * (xk + 0.5f) + r1 * r1 * (yk - 1) * (yk - 1) - r1 * r1 * r2 * r2;
    // Region 2
    while(yk >= 0) {
        drawEllipsePoints(xc, yc, xk, yk, c);
        if(d2 > 0) {
            yk--;
            dy -= 2 * r1 * r1;
            d2 += r1 * r1 - dy;
        } else {
            xk++;
            yk--;
            dx += 2 * r2 * r2;
            dy -= 2 * r1 * r1;
            d2 += dx - dy + r1 * r1;
        }
    }
    

}

public void CGCurve(Vector3 p1, Vector3 p2, Vector3 p3, Vector3 p4, int c) {
    // stroke(0);
    // noFill();
    // bezier(p1.x,p1.y,p2.x,p2.y,p3.x,p3.y,p4.x,p4.y);
    float dist = distance(p1, p2) + distance(p2, p3) + distance(p3, p4);

    for (float t = 0; t <= 1; t += 0.5f / dist) {
        float x = bezierPoint(p1.x, p2.x, p3.x, p4.x, t);
        float y = bezierPoint(p1.y, p2.y, p3.y, p4.y, t);
        drawPoint(x, y, c);
    }
}

public void CGEraser(Vector3 p1, Vector3 p2) {
    int x1 = (int)min(p1.x, p2.x);
    int x2 = (int)max(p1.x, p2.x);
    int y1 = (int)min(p1.y, p2.y);
    int y2 = (int)max(p1.y, p2.y);
    for (int i = x1; i <= x2; i++) {
        for (int j = y1; j <= y2; j++) {
            drawPoint(i, j, color(250));
        }
    }
}

public void CGSprays(float x, float y, float radius, int density) {
    for (int i = 0; i < density; i++) {
        float angle = random(TWO_PI);
        float r = random(radius);
        float sprayX = x + r * cos(angle);
        float sprayY = y + r * sin(angle);
        drawPoint(sprayX, sprayY, color(0));
    }
}

public void drawPoint(float x, float y, int c) {
    stroke(c);
    point(x, y);
}

public float distance(Vector3 a, Vector3 b) {
    Vector3 c = a.sub(b);
    return sqrt(Vector3.dot(c, c));
}

public void drawCirclePoints(float xc, float yc, float xk, float yk, int c) {
    drawPoint(xc + xk, yc + yk, c);
    drawPoint(xc - xk, yc + yk, c);
    drawPoint(xc + xk, yc - yk, c);
    drawPoint(xc - xk, yc - yk, c);
    drawPoint(xc + yk, yc + xk, c);
    drawPoint(xc - yk, yc + xk, c);
    drawPoint(xc + yk, yc - xk, c);
    drawPoint(xc - yk, yc - xk, c);
}

public void drawEllipsePoints(float xc, float yc, float xk, float yk, int c) {
    drawPoint(xc + xk, yc + yk, c);
    drawPoint(xc - xk, yc + yk, c);
    drawPoint(xc + xk, yc - yk, c);
    drawPoint(xc - xk, yc - yk, c);
}

public float bezierPoint(float a, float b, float c, float d, float t) {
    float t1 = 1 - t;
    return t1 * t1 * t1 * a + 3 * t1 * t1 * t * b + 3 * t1 * t * t * c + t * t * t * d;
}


  public void settings() { size(1000, 800); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "HW1" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
